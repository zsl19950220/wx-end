<?php
/**
 * Created by PhpStorm.
 * User: 亮仔
 * Date: 2019/11/11
 * Time: 14:54
 */

namespace app\index\controller;


use think\Controller;
use think\Db;
use think\Request;

class Cart extends Controller
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        checkToken();
    }

    public function save()
    {
        //购物车添加商品
        //判断当前用户是否有购物车
        $uid = $this->request->id;  //用户id


        $data = $this->request->post();//获取数据   价格和商品id

        $gid = $data['gid'];
        $price = $data['price'];

        $model = model('Cartmodel');   //定义模型
        $cart = $model->queryone($uid);   //购物车的信息
        $IncRes = 0;
        $insertRes = 0;
        if ($cart) {
            //有购物车  判断购物车是否有商品
//            Db::startTrans();
            $cid = $cart['cid'];

            $extramodel = model('Cartextramodel');
            $goodsinfo = $extramodel->queryone(['uid' => $uid, 'gid' => $gid,]);

            //判断是否有商品，有的话直接加，没有的话插入一条
            if ($goodsinfo) {
                $IncRes = $extramodel->goodsnumInc(['uid' => $uid, 'gid' => $gid]);


            } else {
                $insertRes = $extramodel->insertgoods(['cid' => $cid, 'gid' => $gid, 'num' => 1, 'status' => 1, 'uid' => $uid]);


            }

            //total  price
            $numberInc = $model->cartInc($uid, 'total');
            $priceInc = $model->cartInc($uid, 'price', $price);

            if (($IncRes && $numberInc && $priceInc) || ($insertRes && $numberInc && $priceInc)) {
                Db::commit();
                return json([
                    'code' => config('code.success'),
                    'msg' => '购物车添加成功',
                    'data' => ['cid' => $cid, 'uid' => $uid]
                ]);
            } else {
                Db::rollback();
                return json([
                    'code' => config('code.fail'),
                    'msg' => '购物车添加失败'
                ]);
            }


        } else {


            //没有购物车，先创建，然后把数据插入到数据库中
            Db::startTrans();  //用到事务（手动的事务）
            $arr = ['id' => $uid, 'total' => 1, 'price' => $data['price']];  //初始化购物车

            $rows = $model->insertcart($arr);  //插入到数据库中
            $cid = $model->getLastInsID();
            $goods = ['cid' => $cid, 'gid' => $data['gid'], 'num' => 1, 'status' => 1, 'uid' => $uid];

            $result = Db::table('cart_extra')->insert($goods);
            if ($rows && $result) {
                Db::commit();
                return json([
                    'code' => config('code.success'),
                    'msg' => '初始化购物车的添加成功',
                    'data' => ['cid' => $cid, 'uid' => $uid]
                ]);

            } else {
                Db::rollback();
                return json([
                    'code' => config('code.fail'),
                    'msg' => '初始化购物车的添加失败'
                ]);
            }

        }


    }

    //接口api/cart/id
    public function read($id)
    {
        $uid = $this->request->id;
        $cartmodel = model('Cartmodel');
        $cart = $cartmodel->queryone($uid);

        //购物车的商品信息，连表查询
        $goods = Db::table('cart_extra')->alias('c')
            ->field('c.gid,c.num,c.status,goods.gname,goods.gthumb,goods.mprice')
            ->join('goods', 'c.gid=goods.gid')
            ->select();

//        $cartextramodel = model('Cartextramodel');
//        $goods = $cartextramodel->querygoods($uid);
        if ($cart) {
            $cart['goods'] = $goods;
            return json([
                'code' => config('code.success'),
                'msg' => '购物车获取成功',
                'data' => $cart
            ]);
        } else {
            return json([
                'code' => config('code.fail'),
                'msg' => '购物车空空如也'
            ]);
        }

    }

    //修改更新购物车的数量

    /**
     * 购物车状态的切换
     * /api/cart/id
     *
     *
     *
     */

    public function update(Request $request, $id)
    {
        $data = $this->request->put();
        $gid = $data['gid'];
        $sale = $data['price'];

        $uid = $this->request->id;
        $arr = ['uid' => $uid, 'gid' => $gid];

        $Cartextramodel = model('Cartextramodel');
        $goods = $Cartextramodel->queryone($arr);
        $status = $goods['status'] ? 0 : 1;
        $num = $goods['num'];

        Db::startTrans();


        $goodsResult = $Cartextramodel->updategoods($arr, ['status' => $status]);
        $cart = model('Cartmodel');


        $ca = $cart->queryone($uid);
        $total = $ca['total'];
        $price = $ca['price'];
        if ($status) {
            $total += $num;
            $price += $num * $sale;
        } else {
            $total -= $num;
            $price -= $num * $sale;
        }
        $cartResult = $cart->cartUpdate(['id' => $uid], ['total' => $total, 'price' => $price]);
        if ($goodsResult && $cartResult) {
            Db::commit();
            return json([
                'code' => config('code.success'),
                'msg' => '状态更改成功',

            ]);

        } else {
            Db::rollback();
            return json([
                'code' => config('code.fail'),
                'msg' => '状态更改失败',

            ]);
        }


    }


}