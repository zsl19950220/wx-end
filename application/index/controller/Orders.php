<?php

namespace app\index\controller;

use think\Controller;
use think\Db;
use think\Exception;
use think\Request;

class Orders extends Controller
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        checkToken();
    }

    /**
     * 显示资源列表
     *
     * @return \think\Response
     */
    public function index()
    {
        //
    }

    /**
     * 显示创建资源表单页.
     *
     * @return \think\Response
     */
    public function create()
    {
        //
    }

    /**
     * 1.能否生成订单：total price
     * 2.生成订单：待支付订单
     * 3.修改购物车
     *      3.1 删除购物车副表中已经下单的商品
     *      3.2 购物车主表
     *           修改信息：total：0  price：0
     *           删除
     *
     */
    public function save(Request $request)
    {
        //
        $uid = $this->request->id;
        $cartModel = model('Cartmodel');
        $cartInfo = $cartModel->queryone($uid);
        if ($cartInfo['total'] == 0) {
            return json([
                'code' => config('code.fail'),
                'msg' => '请选择至少一件商品',
            ]);
        }
        //生成待支付订单
        $ordersModel = model('Ordersmodel');
        $ordersData = ['uid' => $uid];
        //价格
        $ordersData['price'] = $cartInfo['price'];
        //地址
        $ordersData['aid'] = 0;
        //订单号
        $ordersData['ordernum'] = time() . mt_rand(0, 10000);
        //状态
        $ordersData['status'] = 0;
        //购物车选中的商品
        $cartExtraModel = model('Cartextramodel');
        $selectGoods = $cartExtraModel->querySelectGoods(['uid' => $uid, 'status' => 1]);
        $selectGoods = json_encode($selectGoods);
        $ordersData['goods'] = $selectGoods;

        //只能允许一条未支付订单，先查询uid，gid


        Db::startTrans();
        $ordersRes = $ordersModel->insertOrders($ordersData);

        //操作购物车
        $deleteGoodsRes = $cartExtraModel->deleteGoods(['uid' => $uid, 'status' => 1]);
        $existGoods = $cartExtraModel->querygoods($uid);
        if ($existGoods) {
            //还有商品存在则更新
            $cartRes = $cartModel->cartupdate(['id' => $uid], ['total' => 0, 'price' => 0]);
        } else {
            $cartRes = $cartModel->deleteCart(['id' => $uid]);
        }
        if ($ordersRes && $deleteGoodsRes && $cartRes) {
            Db::commit();
            return json([
                'code' => config('code.success'),
                'msg' => '下单成功',
                'ordersnum' => $ordersData['ordernum']
            ]);
        } else {
            Db::rollback();
            return json([
                'code' => config('code.fail'),
                'msg' => '下单失败',
            ]);
        }
    }

    /**
     * 显示指定的资源
     *
     * @param  int $id
     * @return \think\Response
     */
    public function read($id)
    {
        //
        $uid = $this->request->id;
        $ordersModel = model('Ordersmodel');

        $orders = $ordersModel->queryOne(['uid' => $uid, 'ordernum' => $id]);

        $goods = json_decode($orders['goods']);


        $gid = array_map(function ($ele) {
            return $ele->gid;
        }, $goods);
        $ordersGoods = Db::table('goods')->field('gid,gname,gthumb,mprice')->where('gid', 'in', $gid)->select();

        $ordersGoods = array_map(function ($ele, $ele1) {
            $ele['num'] = $ele1->num;
            return $ele;

        }, $ordersGoods, $goods);
        $orders['goods'] = $ordersGoods;


        if ($orders) {
            return json([
                'code' => config('code.success'),
                'msg' => '订单获取成功',
                'data' => $orders,
            ]);
        } else {
            return json([
                'code' => config('code.fail'),
                'msg' => '订单获取失败',
            ]);
        }


    }

    /**
     * 显示编辑资源表单页.
     *
     * @param  int $id
     * @return \think\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * 保存更新的资源
     *
     * @param  \think\Request $request
     * @param  int $id
     * @return \think\Response
     */
    public function update(Request $request, $id)
    {
        //用户id 备注

        $uid = $this->request->id;
        $data = $this->request->put();

        $ordersmodel = model('Ordersmodel');
        $result = $ordersmodel->updateOrders(['uid' => $uid, 'ordernum' => $id], $data);

        if ($result) {
            return json([
                'code' => config('code.success'),
                'msg' => '订单修改成功',

            ]);
        } else {
            return json([
                'code' => config('code.fail'),
                'msg' => '订单修改失败',
            ]);
        }

    }

    /**
     * 删除指定资源
     *
     * @param  int $id
     * @return \think\Response
     */
    public function delete($id)
    {
        //
    }
}
